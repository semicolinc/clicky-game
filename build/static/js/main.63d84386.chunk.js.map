{"version":3,"sources":["logo.svg","components/PictureCard/PictureCard.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","PictureCard","props","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","topScore","score","message","shakeit","shuffledArray","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","logo","this","map","picture","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.63d84386.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f0e512c7.svg\";","import React from \"react\";\r\nimport \"./PictureCard.css\";\r\n\r\nconst PictureCard = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PictureCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport PictureCard from \"./components/PictureCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport cards from \"./cards.json\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.cards to the cards json array\r\n  state = {\r\n    cards,\r\n    clickedArray: [],\r\n    topScore: 0,\r\n    score: 0,\r\n    message: \"\",\r\n    shakeit: \"false\"\r\n  };\r\n  clickPicture = id => {\r\n    // Arrange the pictures in a random manner\r\n    const shuffledArray = this.shuffleArray(cards);\r\n    this.setState({cards: shuffledArray});\r\n    // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\r\n    if (this.state.clickedArray.includes(id)) {\r\n      this.setState({ score: 0, clickedArray: [], message: \"Incorrect!! Game Over ☹️ Click an image to start again!\", shakeit: \"true\"});\r\n    }\r\n    else {\r\n      this.setState({\r\n        clickedArray: this.state.clickedArray.concat([id]),\r\n        score: this.state.score + 1,\r\n        message: \"Correct!! 🙂\",\r\n        shakeit: \"false\"\r\n      });\r\n    }\r\n    // set topscore = score if score>topscore.\r\n    if (this.state.score > this.state.topScore) {\r\n      this.setState({ topScore: this.state.score });\r\n    }\r\n    // shake the wrapper if shakeit is set to true\r\n  }\r\n  shuffleArray = (picturesArray) => {\r\n      for (let i = picturesArray.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\r\n      }\r\n      return picturesArray;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to React Clicky Game!!</h1>\r\n        </header>\r\n        <h3 className=\"App-intro\">\r\n          <strong>Click on an image to earn points, but don't click on any, more than once!</strong> \r\n          <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\r\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\r\n        </h3>\r\n        <Wrapper\r\n        shakeWrapper = {this.state.shakeit}\r\n        pictures=\r\n          {this.state.cards.map(picture => (\r\n            <PictureCard\r\n              clickPicture={this.clickPicture}\r\n              id={picture.id}\r\n              key={picture.id} // to get rid of unique key prop warning\r\n              name={picture.name}\r\n              image={picture.image}\r\n            />\r\n          ))}\r\n        />\r\n        <footer className=\"footer\">\r\n      <div className=\"container\">\r\n        <span className=\"text-muted\">&copy;Shama - Clicky Game - React app.</span>\r\n      </div>\r\n    </footer> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}